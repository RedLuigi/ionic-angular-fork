export var insertView = function (views, view, direction) {
    if (direction === 'root') {
        return setRoot(views, view);
    }
    else if (direction === 'forward') {
        return setForward(views, view);
    }
    else {
        return setBack(views, view);
    }
};
var setRoot = function (views, view) {
    views = views.filter(function (v) { return v.stackId !== view.stackId; });
    views.push(view);
    return views;
};
var ɵ0 = setRoot;
var setForward = function (views, view) {
    var index = views.indexOf(view);
    if (index >= 0) {
        views = views.filter(function (v) { return v.stackId !== view.stackId || v.id <= view.id; });
    }
    else {
        views.push(view);
    }
    return views;
};
var ɵ1 = setForward;
var setBack = function (views, view) {
    var index = views.indexOf(view);
    if (index >= 0) {
        return views.filter(function (v) { return v.stackId !== view.stackId || v.id <= view.id; });
    }
    else {
        return setRoot(views, view);
    }
};
var ɵ2 = setBack;
export var getUrl = function (router, activatedRoute) {
    var urlTree = router.createUrlTree(['.'], { relativeTo: activatedRoute });
    return router.serializeUrl(urlTree);
};
export var isTabSwitch = function (enteringView, leavingView) {
    if (!leavingView) {
        return true;
    }
    return enteringView.stackId !== leavingView.stackId;
};
export var computeStackId = function (prefixUrl, url) {
    if (!prefixUrl) {
        return undefined;
    }
    var segments = toSegments(url);
    for (var i = 0; i < segments.length; i++) {
        if (i >= prefixUrl.length) {
            return segments[i];
        }
        if (segments[i] !== prefixUrl[i]) {
            return undefined;
        }
    }
    return undefined;
};
export var toSegments = function (path) {
    return path
        .split('/')
        .map(function (s) { return s.trim(); })
        .filter(function (s) { return s !== ''; });
};
export var destroyView = function (view) {
    if (view) {
        // TODO lifecycle event
        view.ref.destroy();
        view.unlistenEvents();
    }
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2stdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9uaWMvYW5ndWxhci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvbmF2aWdhdGlvbi9zdGFjay11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUFrQixFQUFFLElBQWUsRUFBRSxTQUEwQjtJQUN4RixJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7UUFDeEIsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCO1NBQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1FBQ2xDLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoQztTQUFNO1FBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsSUFBTSxPQUFPLEdBQUcsVUFBQyxLQUFrQixFQUFFLElBQWU7SUFDbEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQTFCLENBQTBCLENBQUMsQ0FBQztJQUN0RCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDOztBQUVGLElBQU0sVUFBVSxHQUFHLFVBQUMsS0FBa0IsRUFBRSxJQUFlO0lBQ3JELElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUE3QyxDQUE2QyxDQUFDLENBQUM7S0FDMUU7U0FBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbEI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQzs7QUFFRixJQUFNLE9BQU8sR0FBRyxVQUFDLEtBQWtCLEVBQUUsSUFBZTtJQUNsRCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtRQUNkLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQTdDLENBQTZDLENBQUMsQ0FBQztLQUN6RTtTQUFNO1FBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCO0FBQ0gsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRyxVQUFDLE1BQWMsRUFBRSxjQUE4QjtJQUNuRSxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUM1RSxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLFVBQUMsWUFBdUIsRUFBRSxXQUFrQztJQUNyRixJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxPQUFPLFlBQVksQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLE9BQU8sQ0FBQztBQUN0RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUcsVUFBQyxTQUErQixFQUFFLEdBQVc7SUFDekUsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBQ0QsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRCxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxTQUFTLENBQUM7U0FDbEI7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxVQUFDLElBQVk7SUFDckMsT0FBTyxJQUFJO1NBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLENBQUM7U0FDbEIsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEVBQUUsRUFBUixDQUFRLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsVUFBQyxJQUEyQjtJQUNyRCxJQUFJLElBQUksRUFBRTtRQUNSLHVCQUF1QjtRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztLQUN2QjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgTmF2aWdhdGlvbkV4dHJhcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQW5pbWF0aW9uQnVpbGRlciwgTmF2RGlyZWN0aW9uLCBSb3V0ZXJEaXJlY3Rpb24gfSBmcm9tICdAaW9uaWMvY29yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgaW5zZXJ0VmlldyA9ICh2aWV3czogUm91dGVWaWV3W10sIHZpZXc6IFJvdXRlVmlldywgZGlyZWN0aW9uOiBSb3V0ZXJEaXJlY3Rpb24pID0+IHtcclxuICBpZiAoZGlyZWN0aW9uID09PSAncm9vdCcpIHtcclxuICAgIHJldHVybiBzZXRSb290KHZpZXdzLCB2aWV3KTtcclxuICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XHJcbiAgICByZXR1cm4gc2V0Rm9yd2FyZCh2aWV3cywgdmlldyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBzZXRCYWNrKHZpZXdzLCB2aWV3KTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBzZXRSb290ID0gKHZpZXdzOiBSb3V0ZVZpZXdbXSwgdmlldzogUm91dGVWaWV3KSA9PiB7XHJcbiAgdmlld3MgPSB2aWV3cy5maWx0ZXIodiA9PiB2LnN0YWNrSWQgIT09IHZpZXcuc3RhY2tJZCk7XHJcbiAgdmlld3MucHVzaCh2aWV3KTtcclxuICByZXR1cm4gdmlld3M7XHJcbn07XHJcblxyXG5jb25zdCBzZXRGb3J3YXJkID0gKHZpZXdzOiBSb3V0ZVZpZXdbXSwgdmlldzogUm91dGVWaWV3KSA9PiB7XHJcbiAgY29uc3QgaW5kZXggPSB2aWV3cy5pbmRleE9mKHZpZXcpO1xyXG4gIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICB2aWV3cyA9IHZpZXdzLmZpbHRlcih2ID0+IHYuc3RhY2tJZCAhPT0gdmlldy5zdGFja0lkIHx8IHYuaWQgPD0gdmlldy5pZCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZpZXdzLnB1c2godmlldyk7XHJcbiAgfVxyXG4gIHJldHVybiB2aWV3cztcclxufTtcclxuXHJcbmNvbnN0IHNldEJhY2sgPSAodmlld3M6IFJvdXRlVmlld1tdLCB2aWV3OiBSb3V0ZVZpZXcpID0+IHtcclxuICBjb25zdCBpbmRleCA9IHZpZXdzLmluZGV4T2Yodmlldyk7XHJcbiAgaWYgKGluZGV4ID49IDApIHtcclxuICAgIHJldHVybiB2aWV3cy5maWx0ZXIodiA9PiB2LnN0YWNrSWQgIT09IHZpZXcuc3RhY2tJZCB8fCB2LmlkIDw9IHZpZXcuaWQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gc2V0Um9vdCh2aWV3cywgdmlldyk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFVybCA9IChyb3V0ZXI6IFJvdXRlciwgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKSA9PiB7XHJcbiAgY29uc3QgdXJsVHJlZSA9IHJvdXRlci5jcmVhdGVVcmxUcmVlKFsnLiddLCB7IHJlbGF0aXZlVG86IGFjdGl2YXRlZFJvdXRlIH0pO1xyXG4gIHJldHVybiByb3V0ZXIuc2VyaWFsaXplVXJsKHVybFRyZWUpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzVGFiU3dpdGNoID0gKGVudGVyaW5nVmlldzogUm91dGVWaWV3LCBsZWF2aW5nVmlldzogUm91dGVWaWV3IHwgdW5kZWZpbmVkKSA9PiB7XHJcbiAgaWYgKCFsZWF2aW5nVmlldykge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBlbnRlcmluZ1ZpZXcuc3RhY2tJZCAhPT0gbGVhdmluZ1ZpZXcuc3RhY2tJZDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21wdXRlU3RhY2tJZCA9IChwcmVmaXhVcmw6IHN0cmluZ1tdIHwgdW5kZWZpbmVkLCB1cmw6IHN0cmluZykgPT4ge1xyXG4gIGlmICghcHJlZml4VXJsKSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuICBjb25zdCBzZWdtZW50cyA9IHRvU2VnbWVudHModXJsKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoaSA+PSBwcmVmaXhVcmwubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBzZWdtZW50c1tpXTtcclxuICAgIH1cclxuICAgIGlmIChzZWdtZW50c1tpXSAhPT0gcHJlZml4VXJsW2ldKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdG9TZWdtZW50cyA9IChwYXRoOiBzdHJpbmcpID0+IHtcclxuICByZXR1cm4gcGF0aFxyXG4gICAgLnNwbGl0KCcvJylcclxuICAgIC5tYXAocyA9PiBzLnRyaW0oKSlcclxuICAgIC5maWx0ZXIocyA9PiBzICE9PSAnJyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGVzdHJveVZpZXcgPSAodmlldzogUm91dGVWaWV3IHwgdW5kZWZpbmVkKSA9PiB7XHJcbiAgaWYgKHZpZXcpIHtcclxuICAgIC8vIFRPRE8gbGlmZWN5Y2xlIGV2ZW50XHJcbiAgICB2aWV3LnJlZi5kZXN0cm95KCk7XHJcbiAgICB2aWV3LnVubGlzdGVuRXZlbnRzKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGFja0V2ZW50IHtcclxuICBlbnRlcmluZ1ZpZXc6IFJvdXRlVmlldztcclxuICBkaXJlY3Rpb246IFJvdXRlckRpcmVjdGlvbjtcclxuICBhbmltYXRpb246IE5hdkRpcmVjdGlvbiB8IHVuZGVmaW5lZDtcclxuICB0YWJTd2l0Y2g6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVWaWV3IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIHN0YWNrSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICByZWY6IENvbXBvbmVudFJlZjxhbnk+O1xyXG4gIHNhdmVkRGF0YT86IGFueTtcclxuICBzYXZlZEV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXM7XHJcbiAgdW5saXN0ZW5FdmVudHM6ICgpID0+IHZvaWQ7XHJcbiAgYW5pbWF0aW9uQnVpbGRlcj86IEFuaW1hdGlvbkJ1aWxkZXI7XHJcbn1cclxuIl19